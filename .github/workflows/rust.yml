name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build_client:
    runs-on: windows-latest
    steps:
    - name: Configuration
      run: |
        Write-Output "DX_SDK_DIR=${env:TEMP}/dxsdk" >> ${env:GITHUB_ENV}
        Write-Output "DX_SDK=${env:TEMP}/dxsdk/Lib/x86" >> ${env:GITHUB_ENV}
        Write-Output "CEF_PATH=${env:TEMP}/cef" >> ${env:GITHUB_ENV}
    - name: DirectX SDK cache
      id: dx-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.DX_SDK_DIR }}
        key: directx

    - name: CEF static library cache
      id: cef-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CEF_PATH }}
        key: libcef

    - name: Install DirectX SDK
      if: steps.dx-cache.outputs.cache-hit != 'true'
      run: |
        curl -L https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o _DX2010_.exe
        7z x _DX2010_.exe DXSDK/Lib/x86 -o_DX2010_
        mv _DX2010_/DXSDK $DX_SDK_DIR
        rm -fR _DX*_ _DX*_.exe
      shell: bash

    - name: Download CEF static library
      if: steps.cef-cache.outputs.cache-hit != 'true'
      run: |
        curl -L https://github.com/ZOTTCE/samp-cef/releases/download/v1.1-beta/libcef.lib -o libcef.lib
        mkdir $CEF_PATH
        mv libcef.lib $CEF_PATH/libcef.lib
      shell: bash

    - name: Install nightly rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly-2022-11-06-i686
        override: true
        
    - uses: actions/checkout@v2
    - name: Build client
      run: cargo +nightly-2022-11-06-i686 build --release
      shell: bash

    - name: Print Build Path
      run: |
        echo "Current Directory: $(pwd)"
        echo "Build Path: ${{ github.workspace }}"
        echo "Files in Build Path:"
        ls -R "${{ github.workspace }}"
        
    - name: Make a package
      run: |
        mkdir redist && cd redist
        curl -L https://github.com/ZOTTCE/samp-cef/releases/download/v1.1-beta/cef.zip -o cef_redist.zip
        7z x cef_redist.zip -ocef
        cp ../target/release/client.dll cef/client.dll
        cp ../target/release/renderer.exe cef/renderer.exe
        cp ../target/release/loader.dll cef.asi
        7z a -tzip cef.zip cef.asi cef
      shell: bash
          
    - uses: actions/upload-artifact@v2
      with:
        name: client.dll
        path: target/release/client.dll

    - uses: actions/upload-artifact@v2
      with:
        name: renderer.exe
        path: target/release/renderer.exe

    - uses: actions/upload-artifact@v2
      with:
        name: cef.asi
        path: target/release/loader.dll

    - uses: actions/upload-artifact@v2
      with:
        name: cef-windows.dll
        path: target/release/server.dll

    - uses: actions/upload-artifact@v2
      with:
        name: cef.zip
        path: redist/cef.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: Release
        release_name: Release
        body: |
            cef-win-x86.zip added.
        draft: false
        prerelease: false
    
    - name: Bundle Files
      run: |
          mkdir bundled_files
          cp target/release/client.dll bundled_files/client.dll
          cp target/release/renderer.exe bundled_files/renderer.exe
          cp target/release/loader.dll bundled_files/loader.dll
          cp target/release/server.dll bundled_files/server.dll
          cp redist/cef.zip bundled_files/cef.zip
          cd bundled_files
          7z a -tzip cef-win-x86.zip *
      shell: bash

    
    - name: Upload Release Asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bundled_files/cef-win-x86.zip
        asset_name: cef-win-x86.zip
        asset_content_type: application/zip
